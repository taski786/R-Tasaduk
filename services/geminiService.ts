
import { GoogleGenAI, Modality } from "@google/genai";

// Ensure you have the API key in your environment variables
const API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

const ai = API_KEY ? new GoogleGenAI({ apiKey: API_KEY }) : null;

export const generateHugImage = async (
  childImgBase64: string,
  currentImgBase64: string,
  style: string,
): Promise<string> => {
  if (!ai) {
    throw new Error("API key not configured. Please set up your API_KEY environment variable.");
  }
  
  const model = 'gemini-2.5-flash-image';

  const stylePrompts: { [key: string]: string } = {
    nostalgic: 'Apply a warm, slightly faded, nostalgic filter to the entire image, like a cherished memory from an old film photograph.',
    playful: 'The setting should be bright and cheerful, perhaps a sunny park or playground. The hug itself should feel playful and full of joyful energy.',
    sentimental: 'Evoke a deep sense of sentimentality and reflection. The lighting should be soft and emotional, perhaps during a golden hour sunset, to enhance the mood.',
  };

  const styleInstruction = stylePrompts[style] || 'Create a standard, heartwarming image.';

  const prompt = `You are an expert digital artist specializing in photorealistic compositions. Your task is to skillfully merge two photographs into one heartwarming and realistic image. The first photo is of a person as a child, and the second is of the same person as an adult.
  
  Create a new image where the adult is warmly and lovingly hugging the child version of themselves.
  
  **Crucial Instructions:**
  1.  **Preserve Faces and Expressions:** This is the most important rule. You **must** use the original faces and expressions from both uploaded photos. Do not alter, regenerate, or change their facial features or expressions in any way. The goal is to see the authentic individuals from the photos hugging.
  2.  **Realism:** The final composite image must look like a real, high-quality photograph.
  3.  **Composition:** The hug should be the central focus. The poses should be natural and convey a sense of comfort, reflection, and love.
  4.  **Seamless Blending:** The integration of the two figures must be seamless. Pay close attention to lighting, shadows, and edges to make it look like they are in the same physical space. Avoid any digital artifacts.
  5.  **Background:** Create a new, soft, slightly blurred background that complements the subjects and the chosen style without distracting from them.
  
  **Style and Mood:**
  ${styleInstruction}
  
  The final output must be a single, beautiful, and emotionally resonant image. Do not add any text or borders.`;

  const childImagePart = {
    inlineData: {
      data: childImgBase64,
      mimeType: 'image/jpeg',
    },
  };
  
  const currentImagePart = {
    inlineData: {
      data: currentImgBase64,
      mimeType: 'image/jpeg',
    },
  };

  const textPart = {
    text: prompt,
  };

  try {
    const response = await ai.models.generateContent({
      model: model,
      contents: {
        parts: [childImagePart, currentImagePart, textPart],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    // Check if response was blocked due to safety settings
    if (response.candidates?.[0]?.finishReason === 'SAFETY') {
      throw new Error("Image generation was blocked due to safety concerns. Please try with different images.");
    }

    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        const mimeType = part.inlineData.mimeType;
        return `data:${mimeType};base64,${base64ImageBytes}`;
      }
    }
    
    throw new Error("No image was generated by the API. The model might not have been able to process the request.");
  } catch (error: any) {
    console.error("Gemini API Error:", error);
    if (error.message.includes('API key not valid')) {
       throw new Error("Invalid API Key: Please ensure your API key is correct and valid.");
    }
    // Re-throw specific messages we've already created
    if(error.message.includes("safety concerns") || error.message.includes("No image was generated")) {
        throw error;
    }
    // Fallback for other errors
    throw new Error("An unexpected error occurred while communicating with the AI. Please check the console for details.");
  }
};
